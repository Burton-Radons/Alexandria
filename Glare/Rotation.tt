using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Glare
{
	<#GenerateAxes(RotationFamily, () => {#>
		/// <summary>An angle between two lines or a rotation, depending upon usage.</summary>
		public struct <#=This#> : IEquatable<<#=This#>>, IFormattable {
			<#GenerateCommonVector();#>

			/// <summary>A quaternion that does nothing.</summary>
			public static readonly <#=This#> Identity = new <#=This#>(0, 0, 0, 1); 

			/// <summary>Initialise the rotation.</summary>
			public <#=This#>(Angle yaw, Angle pitch, Angle roll) {
				double hroll = roll.InRadians * 0.5f;
				double sroll = Math.Sin(hroll);
				double croll = Math.Cos(hroll);
				double hpitch = pitch.InRadians * 0.5f;
				double spitch = Math.Sin(hpitch);
				double cpitch = Math.Cos(hpitch);
				double hyaw = yaw.InRadians * 0.5f;
				double syaw = Math.Sin(hyaw);
				double cyaw = Math.Cos(hyaw);
				X = <#=ToT#>(((cyaw * spitch) * croll) + ((syaw * cpitch) * sroll));
				Y = <#=ToT#>(((syaw * cpitch) * croll) - ((cyaw * spitch) * sroll));
				Z = <#=ToT#>(((cyaw * cpitch) * sroll) - ((syaw * spitch) * croll));
				W = <#=ToT#>(((cyaw * cpitch) * croll) + ((syaw * spitch) * sroll));
			}

			<#GenerateValueAndRef((dref)=>{#>
				/// <summary>Initialise the rotation.</summary>
				public <#=This#>(<#=dref#> Angle3 angle) : this(angle.X, angle.Y, angle.Z) { }
			<#});/*ValueAndRef*/#>

			<#
			for(int index = 0; index < 2; index++) {
				string matrix = "Matrix4" + (index == 0 ? "f" : "d");
				string scalar = index == 0 ? "float" : "double";

				GenerateReferenceReturn(matrix, (r) => {#>
					/// <summary>Convert to a matrix.</summary>
					public <#=r.ReturnType#> To<#=matrix#>(<#=r.OnlyArgument#>) {
						<#=r.Begin#>
						double xx = X * X, xy = X * Y, xz = X * Z;
						double yy = Y * Y, yz = Y * Z;
						double zz = Z * Z;
						double wx = W * X, wy = W * Y, wz = W * Z;

						result.XX = (<#=scalar#>)(1 - 2 * (yy + zz));
						result.XY = (<#=scalar#>)(2 * (xy - wz));
						result.XZ = (<#=scalar#>)(2 * (xz + wy));

						result.YX = (<#=scalar#>)(2 * (xy + wz));
						result.YY = (<#=scalar#>)(1 - 2 * (xx + zz));
						result.YZ = (<#=scalar#>)(2 * (yz - wx));

						result.ZX = (<#=scalar#>)(2 * (xz - wy));
						result.ZY = (<#=scalar#>)(2 * (yz + wx));
						result.ZZ = (<#=scalar#>)(1 - 2 * (xx + yy));

						result.WX = result.WY = result.WZ = 0;
						result.XW = result.YW = result.ZW = 0;
						result.WW = 1;
						<#=r.Return#>
					}

				<#});/*ReferenceReturn(Matrix4d)*/
			}#>
		}
	<#});#>
}

<#@ include file="CommonAxis.ttinclude" #>
