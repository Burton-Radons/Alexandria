<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Glare
{
	<#GenerateAxes(RotationFamily, () => {#>
		/// <summary>An angle between two lines or a rotation, depending upon usage.</summary>
		public struct <#=This#> : IEquatable<<#=This#>>, IFormattable {
			<#GenerateCommonVector();#>

			public static readonly <#=This#> Identity = new <#=This#>(0, 0, 0, 1); 

			public <#=This#>(Angle yaw, Angle pitch, Angle roll) {
				double hroll = roll.InRadians * 0.5f;
				double sroll = Math.Sin(hroll);
				double croll = Math.Cos(hroll);
				double hpitch = pitch.InRadians * 0.5f;
				double spitch = Math.Sin(hpitch);
				double cpitch = Math.Cos(hpitch);
				double hyaw = yaw.InRadians * 0.5f;
				double syaw = Math.Sin(hyaw);
				double cyaw = Math.Cos(hyaw);
				X = <#=ToT#>(((cyaw * spitch) * croll) + ((syaw * cpitch) * sroll));
				Y = <#=ToT#>(((syaw * cpitch) * croll) - ((cyaw * spitch) * sroll));
				Z = <#=ToT#>(((cyaw * cpitch) * sroll) - ((syaw * spitch) * croll));
				W = <#=ToT#>(((cyaw * cpitch) * croll) + ((syaw * spitch) * sroll));
			}

			<#GenerateValueAndRef((dref)=>{#>
				public <#=This#>(<#=dref#> Angle3 angle) : this(angle.X, angle.Y, angle.Z) { }
			<#});/*ValueAndRef*/#>

			<#
			for(int index = 0; index < 2; index++) {
				string matrix = "Matrix4" + (index == 0 ? "f" : "d");
				string scalar = index == 0 ? "float" : "double";

				GenerateReferenceReturn(matrix, (r) => {#>
					public <#=r.ReturnType#> To<#=matrix#>(<#=r.OnlyArgument#>) {
						<#=r.Begin#>
						double xx = X * X, xy = X * Y, xz = X * Z;
						double yy = Y * Y, yz = Y * Z;
						double zz = Z * Z;
						double wx = W * X, wy = W * Y, wz = W * Z;

						result.XX = (<#=scalar#>)(1 - 2 * (yy + zz));
						result.XY = (<#=scalar#>)(2 * (xy - wz));
						result.XZ = (<#=scalar#>)(2 * (xz + wy));

						result.YX = (<#=scalar#>)(2 * (xy + wz));
						result.YY = (<#=scalar#>)(1 - 2 * (xx + zz));
						result.YZ = (<#=scalar#>)(2 * (yz - wx));

						result.ZX = (<#=scalar#>)(2 * (xz - wy));
						result.ZY = (<#=scalar#>)(2 * (yz + wx));
						result.ZZ = (<#=scalar#>)(1 - 2 * (xx + yy));

						result.WX = result.WY = result.WZ = 0;
						result.XW = result.YW = result.ZW = 0;
						result.WW = 1;
						<#=r.Return#>
					}

				<#});/*ReferenceReturn(Matrix4d)*/
			}#>
		}
#if false
		//Funcion añadida Syderis
		public static <#=This#> Concatenate(<#=This#> value1, <#=This#> value2)
		{
			 <#=This#> <#=This#>;
		    float x = value2.X;
		    float y = value2.Y;
		    float z = value2.Z;
		    float w = value2.W;
		    float num4 = value1.X;
		    float num3 = value1.Y;
		    float num2 = value1.Z;
		    float num = value1.W;
		    float num12 = (y * num2) - (z * num3);
		    float num11 = (z * num4) - (x * num2);
		    float num10 = (x * num3) - (y * num4);
		    float num9 = ((x * num4) + (y * num3)) + (z * num2);
		    <#=This#>.X = ((x * num) + (num4 * w)) + num12;
		    <#=This#>.Y = ((y * num) + (num3 * w)) + num11;
		    <#=This#>.Z = ((z * num) + (num2 * w)) + num10;
		    <#=This#>.W = (w * num) - num9;
		    return <#=This#>;

		}
		
		//Añadida por Syderis
		public static void Concatenate(ref <#=This#> value1, ref <#=This#> value2, out <#=This#> result)
		{
		    float x = value2.X;
		    float y = value2.Y;
		    float z = value2.Z;
		    float w = value2.W;
		    float num4 = value1.X;
		    float num3 = value1.Y;
		    float num2 = value1.Z;
		    float num = value1.W;
		    float num12 = (y * num2) - (z * num3);
		    float num11 = (z * num4) - (x * num2);
		    float num10 = (x * num3) - (y * num4);
		    float num9 = ((x * num4) + (y * num3)) + (z * num2);
		    result.X = ((x * num) + (num4 * w)) + num12;
		    result.Y = ((y * num) + (num3 * w)) + num11;
		    result.Z = ((z * num) + (num2 * w)) + num10;
		    result.W = (w * num) - num9;
		}
		
		//Añadida por Syderis
		public void Conjugate()
		{
			this.X = -this.X;
			this.Y = -this.Y;
			this.Z = -this.Z;
		}
		
		//Añadida por Syderis
		public static <#=This#> Conjugate(<#=This#> value)
		{
			<#=This#> <#=This#>;
			<#=This#>.X = -value.X;
			<#=This#>.Y = -value.Y;
			<#=This#>.Z = -value.Z;
			<#=This#>.W = value.W;
			return <#=This#>;
		}
		
		//Añadida por Syderis
		public static void Conjugate(ref <#=This#> value, out <#=This#> result)
		{
			result.X = -value.X;
			result.Y = -value.Y;
			result.Z = -value.Z;
			result.W = value.W;
		}
 
        public static <#=This#> CreateFromAxisAngle(Vector3 axis, float angle)
        {
			
            <#=This#> <#=This#>;
		    float num2 = angle * 0.5f;
		    float num = (float) Math.Sin((double) num2);
		    float num3 = (float) Math.Cos((double) num2);
		    <#=This#>.X = axis.X * num;
		    <#=This#>.Y = axis.Y * num;
		    <#=This#>.Z = axis.Z * num;
		    <#=This#>.W = num3;
		    return <#=This#>;

        }


        public static void CreateFromAxisAngle(ref Vector3 axis, float angle, out <#=This#> result)
        {
            float num2 = angle * 0.5f;
		    float num = (float) Math.Sin((double) num2);
		    float num3 = (float) Math.Cos((double) num2);
		    result.X = axis.X * num;
		    result.Y = axis.Y * num;
		    result.Z = axis.Z * num;
		    result.W = num3;

        }


        public static <#=This#> CreateFromRotationMatrix(Matrix matrix)
        {
            float num8 = (matrix.M11 + matrix.M22) + matrix.M33;
		    <#=This#> <#=This#> = new <#=This#>();
		    if (num8 > 0f)
		    {
		        float num = (float) Math.Sqrt((double) (num8 + 1f));
		        <#=This#>.W = num * 0.5f;
		        num = 0.5f / num;
		        <#=This#>.X = (matrix.M23 - matrix.M32) * num;
		        <#=This#>.Y = (matrix.M31 - matrix.M13) * num;
		        <#=This#>.Z = (matrix.M12 - matrix.M21) * num;
		        return <#=This#>;
		    }
		    if ((matrix.M11 >= matrix.M22) && (matrix.M11 >= matrix.M33))
		    {
		        float num7 = (float) Math.Sqrt((double) (((1f + matrix.M11) - matrix.M22) - matrix.M33));
		        float num4 = 0.5f / num7;
		        <#=This#>.X = 0.5f * num7;
		        <#=This#>.Y = (matrix.M12 + matrix.M21) * num4;
		        <#=This#>.Z = (matrix.M13 + matrix.M31) * num4;
		        <#=This#>.W = (matrix.M23 - matrix.M32) * num4;
		        return <#=This#>;
		    }
		    if (matrix.M22 > matrix.M33)
		    {
		        float num6 = (float) Math.Sqrt((double) (((1f + matrix.M22) - matrix.M11) - matrix.M33));
		        float num3 = 0.5f / num6;
		        <#=This#>.X = (matrix.M21 + matrix.M12) * num3;
		        <#=This#>.Y = 0.5f * num6;
		        <#=This#>.Z = (matrix.M32 + matrix.M23) * num3;
		        <#=This#>.W = (matrix.M31 - matrix.M13) * num3;
		        return <#=This#>;
		    }
		    float num5 = (float) Math.Sqrt((double) (((1f + matrix.M33) - matrix.M11) - matrix.M22));
		    float num2 = 0.5f / num5;
		    <#=This#>.X = (matrix.M31 + matrix.M13) * num2;
		    <#=This#>.Y = (matrix.M32 + matrix.M23) * num2;
		    <#=This#>.Z = 0.5f * num5;
		    <#=This#>.W = (matrix.M12 - matrix.M21) * num2;
			
		    return <#=This#>;

        }


        public static void CreateFromRotationMatrix(ref Matrix matrix, out <#=This#> result)
        {
            float num8 = (matrix.M11 + matrix.M22) + matrix.M33;
		    if (num8 > 0f)
		    {
		        float num = (float) Math.Sqrt((double) (num8 + 1f));
		        result.W = num * 0.5f;
		        num = 0.5f / num;
		        result.X = (matrix.M23 - matrix.M32) * num;
		        result.Y = (matrix.M31 - matrix.M13) * num;
		        result.Z = (matrix.M12 - matrix.M21) * num;
		    }
		    else if ((matrix.M11 >= matrix.M22) && (matrix.M11 >= matrix.M33))
		    {
		        float num7 = (float) Math.Sqrt((double) (((1f + matrix.M11) - matrix.M22) - matrix.M33));
		        float num4 = 0.5f / num7;
		        result.X = 0.5f * num7;
		        result.Y = (matrix.M12 + matrix.M21) * num4;
		        result.Z = (matrix.M13 + matrix.M31) * num4;
		        result.W = (matrix.M23 - matrix.M32) * num4;
		    }
		    else if (matrix.M22 > matrix.M33)
		    {
		        float num6 = (float) Math.Sqrt((double) (((1f + matrix.M22) - matrix.M11) - matrix.M33));
		        float num3 = 0.5f / num6;
		        result.X = (matrix.M21 + matrix.M12) * num3;
		        result.Y = 0.5f * num6;
		        result.Z = (matrix.M32 + matrix.M23) * num3;
		        result.W = (matrix.M31 - matrix.M13) * num3;
		    }
		    else
		    {
		        float num5 = (float) Math.Sqrt((double) (((1f + matrix.M33) - matrix.M11) - matrix.M22));
		        float num2 = 0.5f / num5;
		        result.X = (matrix.M31 + matrix.M13) * num2;
		        result.Y = (matrix.M32 + matrix.M23) * num2;
		        result.Z = 0.5f * num5;
		        result.W = (matrix.M12 - matrix.M21) * num2;
		    }

        }

 		public static void CreateFromYawPitchRoll(float yaw, float pitch, float roll, out <#=This#> result)
		{
		    float num9 = roll * 0.5f;
		    float num6 = (float) Math.Sin((double) num9);
		    float num5 = (float) Math.Cos((double) num9);
		    float num8 = pitch * 0.5f;
		    float num4 = (float) Math.Sin((double) num8);
		    float num3 = (float) Math.Cos((double) num8);
		    float num7 = yaw * 0.5f;
		    float num2 = (float) Math.Sin((double) num7);
		    float num = (float) Math.Cos((double) num7);
		    result.X = ((num * num4) * num5) + ((num2 * num3) * num6);
		    result.Y = ((num2 * num3) * num5) - ((num * num4) * num6);
		    result.Z = ((num * num3) * num6) - ((num2 * num4) * num5);
		    result.W = ((num * num3) * num5) + ((num2 * num4) * num6);
		}

        public static <#=This#> Divide(<#=This#> <#=This#>1, <#=This#> <#=This#>2)
        {
            <#=This#> <#=This#>;
		    float x = <#=This#>1.X;
		    float y = <#=This#>1.Y;
		    float z = <#=This#>1.Z;
		    float w = <#=This#>1.W;
		    float num14 = (((<#=This#>2.X * <#=This#>2.X) + (<#=This#>2.Y * <#=This#>2.Y)) + (<#=This#>2.Z * <#=This#>2.Z)) + (<#=This#>2.W * <#=This#>2.W);
		    float num5 = 1f / num14;
		    float num4 = -<#=This#>2.X * num5;
		    float num3 = -<#=This#>2.Y * num5;
		    float num2 = -<#=This#>2.Z * num5;
		    float num = <#=This#>2.W * num5;
		    float num13 = (y * num2) - (z * num3);
		    float num12 = (z * num4) - (x * num2);
		    float num11 = (x * num3) - (y * num4);
		    float num10 = ((x * num4) + (y * num3)) + (z * num2);
		    <#=This#>.X = ((x * num) + (num4 * w)) + num13;
		    <#=This#>.Y = ((y * num) + (num3 * w)) + num12;
		    <#=This#>.Z = ((z * num) + (num2 * w)) + num11;
		    <#=This#>.W = (w * num) - num10;
		    return <#=This#>;

        }

        public static void Divide(ref <#=This#> <#=This#>1, ref <#=This#> <#=This#>2, out <#=This#> result)
        {
            float x = <#=This#>1.X;
		    float y = <#=This#>1.Y;
		    float z = <#=This#>1.Z;
		    float w = <#=This#>1.W;
		    float num14 = (((<#=This#>2.X * <#=This#>2.X) + (<#=This#>2.Y * <#=This#>2.Y)) + (<#=This#>2.Z * <#=This#>2.Z)) + (<#=This#>2.W * <#=This#>2.W);
		    float num5 = 1f / num14;
		    float num4 = -<#=This#>2.X * num5;
		    float num3 = -<#=This#>2.Y * num5;
		    float num2 = -<#=This#>2.Z * num5;
		    float num = <#=This#>2.W * num5;
		    float num13 = (y * num2) - (z * num3);
		    float num12 = (z * num4) - (x * num2);
		    float num11 = (x * num3) - (y * num4);
		    float num10 = ((x * num4) + (y * num3)) + (z * num2);
		    result.X = ((x * num) + (num4 * w)) + num13;
		    result.Y = ((y * num) + (num3 * w)) + num12;
		    result.Z = ((z * num) + (num2 * w)) + num11;
		    result.W = (w * num) - num10;

        }


        public static float Dot(<#=This#> <#=This#>1, <#=This#> <#=This#>2)
        {
            return ((((<#=This#>1.X * <#=This#>2.X) + (<#=This#>1.Y * <#=This#>2.Y)) + (<#=This#>1.Z * <#=This#>2.Z)) + (<#=This#>1.W * <#=This#>2.W));
        }


        public static void Dot(ref <#=This#> <#=This#>1, ref <#=This#> <#=This#>2, out float result)
        {
            result = (((<#=This#>1.X * <#=This#>2.X) + (<#=This#>1.Y * <#=This#>2.Y)) + (<#=This#>1.Z * <#=This#>2.Z)) + (<#=This#>1.W * <#=This#>2.W);
        }


        public override bool Equals(object obj)
        {
             bool flag = false;
		    if (obj is <#=This#>)
		    {
		        flag = this.Equals((<#=This#>) obj);
		    }
		    return flag;
        }


        public bool Equals(<#=This#> other)
        {
			return ((((this.X == other.X) && (this.Y == other.Y)) && (this.Z == other.Z)) && (this.W == other.W));
        }


        public override int GetHashCode()
        {
            return (((this.X.GetHashCode() + this.Y.GetHashCode()) + this.Z.GetHashCode()) + this.W.GetHashCode());
        }


        public static <#=This#> Inverse(<#=This#> <#=This#>)
        {
            <#=This#> <#=This#>2;
		    float num2 = (((<#=This#>.X * <#=This#>.X) + (<#=This#>.Y * <#=This#>.Y)) + (<#=This#>.Z * <#=This#>.Z)) + (<#=This#>.W * <#=This#>.W);
		    float num = 1f / num2;
		    <#=This#>2.X = -<#=This#>.X * num;
		    <#=This#>2.Y = -<#=This#>.Y * num;
		    <#=This#>2.Z = -<#=This#>.Z * num;
		    <#=This#>2.W = <#=This#>.W * num;
		    return <#=This#>2;

        }

        public static void Inverse(ref <#=This#> <#=This#>, out <#=This#> result)
        {
            float num2 = (((<#=This#>.X * <#=This#>.X) + (<#=This#>.Y * <#=This#>.Y)) + (<#=This#>.Z * <#=This#>.Z)) + (<#=This#>.W * <#=This#>.W);
		    float num = 1f / num2;
		    result.X = -<#=This#>.X * num;
		    result.Y = -<#=This#>.Y * num;
		    result.Z = -<#=This#>.Z * num;
		    result.W = <#=This#>.W * num;
        }

        public float Length()
        {
            float num = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
    		return (float) Math.Sqrt((double) num);
        }


        public float LengthSquared()
        {
            return ((((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W));
        }


        public static <#=This#> Lerp(<#=This#> <#=This#>1, <#=This#> <#=This#>2, float amount)
        {
            float num = amount;
		    float num2 = 1f - num;
		    <#=This#> <#=This#> = new <#=This#>();
		    float num5 = (((<#=This#>1.X * <#=This#>2.X) + (<#=This#>1.Y * <#=This#>2.Y)) + (<#=This#>1.Z * <#=This#>2.Z)) + (<#=This#>1.W * <#=This#>2.W);
		    if (num5 >= 0f)
		    {
		        <#=This#>.X = (num2 * <#=This#>1.X) + (num * <#=This#>2.X);
		        <#=This#>.Y = (num2 * <#=This#>1.Y) + (num * <#=This#>2.Y);
		        <#=This#>.Z = (num2 * <#=This#>1.Z) + (num * <#=This#>2.Z);
		        <#=This#>.W = (num2 * <#=This#>1.W) + (num * <#=This#>2.W);
		    }
		    else
		    {
		        <#=This#>.X = (num2 * <#=This#>1.X) - (num * <#=This#>2.X);
		        <#=This#>.Y = (num2 * <#=This#>1.Y) - (num * <#=This#>2.Y);
		        <#=This#>.Z = (num2 * <#=This#>1.Z) - (num * <#=This#>2.Z);
		        <#=This#>.W = (num2 * <#=This#>1.W) - (num * <#=This#>2.W);
		    }
		    float num4 = (((<#=This#>.X * <#=This#>.X) + (<#=This#>.Y * <#=This#>.Y)) + (<#=This#>.Z * <#=This#>.Z)) + (<#=This#>.W * <#=This#>.W);
		    float num3 = 1f / ((float) Math.Sqrt((double) num4));
		    <#=This#>.X *= num3;
		    <#=This#>.Y *= num3;
		    <#=This#>.Z *= num3;
		    <#=This#>.W *= num3;
		    return <#=This#>;
        }


        public static void Lerp(ref <#=This#> <#=This#>1, ref <#=This#> <#=This#>2, float amount, out <#=This#> result)
        {
            float num = amount;
		    float num2 = 1f - num;
		    float num5 = (((<#=This#>1.X * <#=This#>2.X) + (<#=This#>1.Y * <#=This#>2.Y)) + (<#=This#>1.Z * <#=This#>2.Z)) + (<#=This#>1.W * <#=This#>2.W);
		    if (num5 >= 0f)
		    {
		        result.X = (num2 * <#=This#>1.X) + (num * <#=This#>2.X);
		        result.Y = (num2 * <#=This#>1.Y) + (num * <#=This#>2.Y);
		        result.Z = (num2 * <#=This#>1.Z) + (num * <#=This#>2.Z);
		        result.W = (num2 * <#=This#>1.W) + (num * <#=This#>2.W);
		    }
		    else
		    {
		        result.X = (num2 * <#=This#>1.X) - (num * <#=This#>2.X);
		        result.Y = (num2 * <#=This#>1.Y) - (num * <#=This#>2.Y);
		        result.Z = (num2 * <#=This#>1.Z) - (num * <#=This#>2.Z);
		        result.W = (num2 * <#=This#>1.W) - (num * <#=This#>2.W);
		    }
		    float num4 = (((result.X * result.X) + (result.Y * result.Y)) + (result.Z * result.Z)) + (result.W * result.W);
		    float num3 = 1f / ((float) Math.Sqrt((double) num4));
		    result.X *= num3;
		    result.Y *= num3;
		    result.Z *= num3;
		    result.W *= num3;

        }


        public static <#=This#> Slerp(<#=This#> <#=This#>1, <#=This#> <#=This#>2, float amount)
        {
            float num2;
		    float num3;
		    <#=This#> <#=This#>;
		    float num = amount;
		    float num4 = (((<#=This#>1.X * <#=This#>2.X) + (<#=This#>1.Y * <#=This#>2.Y)) + (<#=This#>1.Z * <#=This#>2.Z)) + (<#=This#>1.W * <#=This#>2.W);
		    bool flag = false;
		    if (num4 < 0f)
		    {
		        flag = true;
		        num4 = -num4;
		    }
		    if (num4 > 0.999999f)
		    {
		        num3 = 1f - num;
		        num2 = flag ? -num : num;
		    }
		    else
		    {
		        float num5 = (float) Math.Acos((double) num4);
		        float num6 = (float) (1.0 / Math.Sin((double) num5));
		        num3 = ((float) Math.Sin((double) ((1f - num) * num5))) * num6;
		        num2 = flag ? (((float) -Math.Sin((double) (num * num5))) * num6) : (((float) Math.Sin((double) (num * num5))) * num6);
		    }
		    <#=This#>.X = (num3 * <#=This#>1.X) + (num2 * <#=This#>2.X);
		    <#=This#>.Y = (num3 * <#=This#>1.Y) + (num2 * <#=This#>2.Y);
		    <#=This#>.Z = (num3 * <#=This#>1.Z) + (num2 * <#=This#>2.Z);
		    <#=This#>.W = (num3 * <#=This#>1.W) + (num2 * <#=This#>2.W);
		    return <#=This#>;
        }


        public static void Slerp(ref <#=This#> <#=This#>1, ref <#=This#> <#=This#>2, float amount, out <#=This#> result)
        {
            float num2;
		    float num3;
		    float num = amount;
		    float num4 = (((<#=This#>1.X * <#=This#>2.X) + (<#=This#>1.Y * <#=This#>2.Y)) + (<#=This#>1.Z * <#=This#>2.Z)) + (<#=This#>1.W * <#=This#>2.W);
		    bool flag = false;
		    if (num4 < 0f)
		    {
		        flag = true;
		        num4 = -num4;
		    }
		    if (num4 > 0.999999f)
		    {
		        num3 = 1f - num;
		        num2 = flag ? -num : num;
		    }
		    else
		    {
		        float num5 = (float) Math.Acos((double) num4);
		        float num6 = (float) (1.0 / Math.Sin((double) num5));
		        num3 = ((float) Math.Sin((double) ((1f - num) * num5))) * num6;
		        num2 = flag ? (((float) -Math.Sin((double) (num * num5))) * num6) : (((float) Math.Sin((double) (num * num5))) * num6);
		    }
		    result.X = (num3 * <#=This#>1.X) + (num2 * <#=This#>2.X);
		    result.Y = (num3 * <#=This#>1.Y) + (num2 * <#=This#>2.Y);
		    result.Z = (num3 * <#=This#>1.Z) + (num2 * <#=This#>2.Z);
		    result.W = (num3 * <#=This#>1.W) + (num2 * <#=This#>2.W);
        }


        public static <#=This#> Subtract(<#=This#> <#=This#>1, <#=This#> <#=This#>2)
        {
            <#=This#> <#=This#>;
		    <#=This#>.X = <#=This#>1.X - <#=This#>2.X;
		    <#=This#>.Y = <#=This#>1.Y - <#=This#>2.Y;
		    <#=This#>.Z = <#=This#>1.Z - <#=This#>2.Z;
		    <#=This#>.W = <#=This#>1.W - <#=This#>2.W;
		    return <#=This#>;
        }


        public static void Subtract(ref <#=This#> <#=This#>1, ref <#=This#> <#=This#>2, out <#=This#> result)
        {
            result.X = <#=This#>1.X - <#=This#>2.X;
		    result.Y = <#=This#>1.Y - <#=This#>2.Y;
		    result.Z = <#=This#>1.Z - <#=This#>2.Z;
		    result.W = <#=This#>1.W - <#=This#>2.W;
        }


        public static <#=This#> Multiply(<#=This#> <#=This#>1, <#=This#> <#=This#>2)
        {
            <#=This#> <#=This#>;
		    float x = <#=This#>1.X;
		    float y = <#=This#>1.Y;
		    float z = <#=This#>1.Z;
		    float w = <#=This#>1.W;
		    float num4 = <#=This#>2.X;
		    float num3 = <#=This#>2.Y;
		    float num2 = <#=This#>2.Z;
		    float num = <#=This#>2.W;
		    float num12 = (y * num2) - (z * num3);
		    float num11 = (z * num4) - (x * num2);
		    float num10 = (x * num3) - (y * num4);
		    float num9 = ((x * num4) + (y * num3)) + (z * num2);
		    <#=This#>.X = ((x * num) + (num4 * w)) + num12;
		    <#=This#>.Y = ((y * num) + (num3 * w)) + num11;
		    <#=This#>.Z = ((z * num) + (num2 * w)) + num10;
		    <#=This#>.W = (w * num) - num9;
		    return <#=This#>;
        }


        public static <#=This#> Multiply(<#=This#> <#=This#>1, float scaleFactor)
        {
            <#=This#> <#=This#>;
		    <#=This#>.X = <#=This#>1.X * scaleFactor;
		    <#=This#>.Y = <#=This#>1.Y * scaleFactor;
		    <#=This#>.Z = <#=This#>1.Z * scaleFactor;
		    <#=This#>.W = <#=This#>1.W * scaleFactor;
		    return <#=This#>;
        }


        public static void Multiply(ref <#=This#> <#=This#>1, float scaleFactor, out <#=This#> result)
        {
            result.X = <#=This#>1.X * scaleFactor;
		    result.Y = <#=This#>1.Y * scaleFactor;
		    result.Z = <#=This#>1.Z * scaleFactor;
		    result.W = <#=This#>1.W * scaleFactor;
        }


        public static void Multiply(ref <#=This#> <#=This#>1, ref <#=This#> <#=This#>2, out <#=This#> result)
        {
            float x = <#=This#>1.X;
		    float y = <#=This#>1.Y;
		    float z = <#=This#>1.Z;
		    float w = <#=This#>1.W;
		    float num4 = <#=This#>2.X;
		    float num3 = <#=This#>2.Y;
		    float num2 = <#=This#>2.Z;
		    float num = <#=This#>2.W;
		    float num12 = (y * num2) - (z * num3);
		    float num11 = (z * num4) - (x * num2);
		    float num10 = (x * num3) - (y * num4);
		    float num9 = ((x * num4) + (y * num3)) + (z * num2);
		    result.X = ((x * num) + (num4 * w)) + num12;
		    result.Y = ((y * num) + (num3 * w)) + num11;
		    result.Z = ((z * num) + (num2 * w)) + num10;
		    result.W = (w * num) - num9;
        }


        public static <#=This#> Negate(<#=This#> <#=This#>)
        {
            <#=This#> <#=This#>2;
		    <#=This#>2.X = -<#=This#>.X;
		    <#=This#>2.Y = -<#=This#>.Y;
		    <#=This#>2.Z = -<#=This#>.Z;
		    <#=This#>2.W = -<#=This#>.W;
		    return <#=This#>2;
        }


        public static void Negate(ref <#=This#> <#=This#>, out <#=This#> result)
        {
            result.X = -<#=This#>.X;
		    result.Y = -<#=This#>.Y;
		    result.Z = -<#=This#>.Z;
		    result.W = -<#=This#>.W;
        }


        public void Normalize()
        {
            float num2 = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
		    float num = 1f / ((float) Math.Sqrt((double) num2));
		    this.X *= num;
		    this.Y *= num;
		    this.Z *= num;
		    this.W *= num;
        }


        public static <#=This#> Normalize(<#=This#> <#=This#>)
        {
            <#=This#> <#=This#>2;
		    float num2 = (((<#=This#>.X * <#=This#>.X) + (<#=This#>.Y * <#=This#>.Y)) + (<#=This#>.Z * <#=This#>.Z)) + (<#=This#>.W * <#=This#>.W);
		    float num = 1f / ((float) Math.Sqrt((double) num2));
		    <#=This#>2.X = <#=This#>.X * num;
		    <#=This#>2.Y = <#=This#>.Y * num;
		    <#=This#>2.Z = <#=This#>.Z * num;
		    <#=This#>2.W = <#=This#>.W * num;
		    return <#=This#>2;
        }


        public static void Normalize(ref <#=This#> <#=This#>, out <#=This#> result)
        {
            float num2 = (((<#=This#>.X * <#=This#>.X) + (<#=This#>.Y * <#=This#>.Y)) + (<#=This#>.Z * <#=This#>.Z)) + (<#=This#>.W * <#=This#>.W);
		    float num = 1f / ((float) Math.Sqrt((double) num2));
		    result.X = <#=This#>.X * num;
		    result.Y = <#=This#>.Y * num;
		    result.Z = <#=This#>.Z * num;
		    result.W = <#=This#>.W * num;
        }


        public static <#=This#> operator +(<#=This#> <#=This#>1, <#=This#> <#=This#>2)
        {
            <#=This#> <#=This#>;
		    <#=This#>.X = <#=This#>1.X + <#=This#>2.X;
		    <#=This#>.Y = <#=This#>1.Y + <#=This#>2.Y;
		    <#=This#>.Z = <#=This#>1.Z + <#=This#>2.Z;
		    <#=This#>.W = <#=This#>1.W + <#=This#>2.W;
		    return <#=This#>;
        }


        public static <#=This#> operator /(<#=This#> <#=This#>1, <#=This#> <#=This#>2)
        {
            <#=This#> <#=This#>;
		    float x = <#=This#>1.X;
		    float y = <#=This#>1.Y;
		    float z = <#=This#>1.Z;
		    float w = <#=This#>1.W;
		    float num14 = (((<#=This#>2.X * <#=This#>2.X) + (<#=This#>2.Y * <#=This#>2.Y)) + (<#=This#>2.Z * <#=This#>2.Z)) + (<#=This#>2.W * <#=This#>2.W);
		    float num5 = 1f / num14;
		    float num4 = -<#=This#>2.X * num5;
		    float num3 = -<#=This#>2.Y * num5;
		    float num2 = -<#=This#>2.Z * num5;
		    float num = <#=This#>2.W * num5;
		    float num13 = (y * num2) - (z * num3);
		    float num12 = (z * num4) - (x * num2);
		    float num11 = (x * num3) - (y * num4);
		    float num10 = ((x * num4) + (y * num3)) + (z * num2);
		    <#=This#>.X = ((x * num) + (num4 * w)) + num13;
		    <#=This#>.Y = ((y * num) + (num3 * w)) + num12;
		    <#=This#>.Z = ((z * num) + (num2 * w)) + num11;
		    <#=This#>.W = (w * num) - num10;
		    return <#=This#>;
        }


        public static bool operator ==(<#=This#> <#=This#>1, <#=This#> <#=This#>2)
        {
            return ((((<#=This#>1.X == <#=This#>2.X) && (<#=This#>1.Y == <#=This#>2.Y)) && (<#=This#>1.Z == <#=This#>2.Z)) && (<#=This#>1.W == <#=This#>2.W));
        }


        public static bool operator !=(<#=This#> <#=This#>1, <#=This#> <#=This#>2)
        {
            if (((<#=This#>1.X == <#=This#>2.X) && (<#=This#>1.Y == <#=This#>2.Y)) && (<#=This#>1.Z == <#=This#>2.Z))
		    {
		        return (<#=This#>1.W != <#=This#>2.W);
		    }
		    return true;
        }


        public static <#=This#> operator *(<#=This#> <#=This#>1, <#=This#> <#=This#>2)
        {
            <#=This#> <#=This#>;
		    float x = <#=This#>1.X;
		    float y = <#=This#>1.Y;
		    float z = <#=This#>1.Z;
		    float w = <#=This#>1.W;
		    float num4 = <#=This#>2.X;
		    float num3 = <#=This#>2.Y;
		    float num2 = <#=This#>2.Z;
		    float num = <#=This#>2.W;
		    float num12 = (y * num2) - (z * num3);
		    float num11 = (z * num4) - (x * num2);
		    float num10 = (x * num3) - (y * num4);
		    float num9 = ((x * num4) + (y * num3)) + (z * num2);
		    <#=This#>.X = ((x * num) + (num4 * w)) + num12;
		    <#=This#>.Y = ((y * num) + (num3 * w)) + num11;
		    <#=This#>.Z = ((z * num) + (num2 * w)) + num10;
		    <#=This#>.W = (w * num) - num9;
		    return <#=This#>;
        }


        public static <#=This#> operator *(<#=This#> <#=This#>1, float scaleFactor)
        {
            <#=This#> <#=This#>;
		    <#=This#>.X = <#=This#>1.X * scaleFactor;
		    <#=This#>.Y = <#=This#>1.Y * scaleFactor;
		    <#=This#>.Z = <#=This#>1.Z * scaleFactor;
		    <#=This#>.W = <#=This#>1.W * scaleFactor;
		    return <#=This#>;
        }


        public static <#=This#> operator -(<#=This#> <#=This#>1, <#=This#> <#=This#>2)
        {
            <#=This#> <#=This#>;
		    <#=This#>.X = <#=This#>1.X - <#=This#>2.X;
		    <#=This#>.Y = <#=This#>1.Y - <#=This#>2.Y;
		    <#=This#>.Z = <#=This#>1.Z - <#=This#>2.Z;
		    <#=This#>.W = <#=This#>1.W - <#=This#>2.W;
		    return <#=This#>;

        }


        public static <#=This#> operator -(<#=This#> <#=This#>)
        {
            <#=This#> <#=This#>2;
		    <#=This#>2.X = -<#=This#>.X;
		    <#=This#>2.Y = -<#=This#>.Y;
		    <#=This#>2.Z = -<#=This#>.Z;
		    <#=This#>2.W = -<#=This#>.W;
		    return <#=This#>2;
        }


        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder(32);
            sb.Append("{X:");
            sb.Append(this.X);
            sb.Append(" Y:");
            sb.Append(this.Y);
            sb.Append(" Z:");
            sb.Append(this.Z);
            sb.Append(" W:");
            sb.Append(this.W);
            sb.Append("}");
            return sb.ToString();
        }

		internal Matrix ToMatrix ()
		{
			Matrix matrix = Matrix.Identity;
			ToMatrix(out matrix);
			return matrix;
		}

		internal void ToMatrix (out Matrix matrix)
		{
			<#=This#>.ToMatrix(this, out matrix);
		}

		internal static void ToMatrix(<#=This#> <#=This#>, out Matrix matrix)
		{

			// source -> http://content.gpwiki.org/index.php/OpenGL:Tutorials:Using_<#=This#>s_to_represent_rotation#<#=This#>_to_Matrix
			float x2 = <#=This#>.X * <#=This#>.X;
			float y2 = <#=This#>.Y * <#=This#>.Y;
			float z2 = <#=This#>.Z * <#=This#>.Z;
			float xy = <#=This#>.X * <#=This#>.Y;
			float xz = <#=This#>.X * <#=This#>.Z;
			float yz = <#=This#>.Y * <#=This#>.Z;
			float wx = <#=This#>.W * <#=This#>.X;
			float wy = <#=This#>.W * <#=This#>.Y;
			float wz = <#=This#>.W * <#=This#>.Z;

			// This calculation would be a lot more complicated for non-unit length <#=This#>s
			// Note: The constructor of Matrix4 expects the Matrix in column-major format like expected by
			//   OpenGL
			matrix.M11 = 1.0f - 2.0f * (y2 + z2);
			matrix.M12 = 2.0f * (xy - wz);
			matrix.M13 = 2.0f * (xz + wy);
			matrix.M14 = 0.0f;

			matrix.M21 = 2.0f * (xy + wz);
			matrix.M22 = 1.0f - 2.0f * (x2 + z2);
			matrix.M23 = 2.0f * (yz - wx);
			matrix.M24 = 0.0f;

			matrix.M31 = 2.0f * (xz - wy);
			matrix.M32 = 2.0f * (yz + wx);
			matrix.M33 = 1.0f - 2.0f * (x2 + y2);
			matrix.M34 = 0.0f;

			matrix.M41 = 2.0f * (xz - wy);
			matrix.M42 = 2.0f * (yz + wx);
			matrix.M43 = 1.0f - 2.0f * (x2 + y2);
			matrix.M44 = 0.0f;

			//return Matrix4( 1.0f - 2.0f * (y2 + z2), 2.0f * (xy - wz), 2.0f * (xz + wy), 0.0f,
			//		2.0f * (xy + wz), 1.0f - 2.0f * (x2 + z2), 2.0f * (yz - wx), 0.0f,
			//		2.0f * (xz - wy), 2.0f * (yz + wx), 1.0f - 2.0f * (x2 + y2), 0.0f,
			//		0.0f, 0.0f, 0.0f, 1.0f)
			//	}
		}

		internal Vector3 Xyz
		{
			get {
				return new Vector3(X, Y, Z);
			}

			set {
				X = value.X;
				Y = value.Y;
				Z = value.Z;
			}
		}


    }
}
		#endif
	<#});#>
}

<#@ include file="CommonAxis.ttinclude" #>
